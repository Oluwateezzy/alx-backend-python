{
  "info": {
    "name": "Messaging App API",
    "description": "Complete API testing collection for Django messaging app with JWT authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "conversation_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "message_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Get JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('access_token', response.access);",
                  "    pm.collectionVariables.set('refresh_token', response.refresh);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.access).to.be.a('string');",
                  "        pm.expect(response.refresh).to.be.a('string');",
                  "    });",
                  "} else {",
                  "    pm.test('Login failed', function () {",
                  "        pm.expect.fail('Login request failed with status: ' + pm.response.code);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"testpass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/token/",
              "host": ["{{base_url}}"],
              "path": ["api", "token", ""]
            }
          }
        },
        {
          "name": "Refresh JWT Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('access_token', response.access);",
                  "    pm.test('Token refresh successful', function () {",
                  "        pm.expect(response.access).to.be.a('string');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/token/refresh/",
              "host": ["{{base_url}}"],
              "path": ["api", "token", "refresh", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Conversations",
      "item": [
        {
          "name": "Create Private Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('conversation_id', response.id);",
                  "    pm.test('Conversation created successfully', function () {",
                  "        pm.expect(response.id).to.be.a('number');",
                  "        pm.expect(response.is_group).to.eql(false);",
                  "        pm.expect(response.participants).to.be.an('array');",
                  "    });",
                  "} else {",
                  "    pm.test('Conversation creation failed', function () {",
                  "        pm.expect.fail('Request failed with status: ' + pm.response.code);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"participants\": [2],\n    \"is_group\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          }
        },
        {
          "name": "Create Group Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Group conversation created successfully', function () {",
                  "        pm.expect(response.id).to.be.a('number');",
                  "        pm.expect(response.is_group).to.eql(true);",
                  "        pm.expect(response.group_name).to.be.a('string');",
                  "        pm.expect(response.participants).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"participants\": [2, 3],\n    \"is_group\": true,\n    \"group_name\": \"Test Group Chat\",\n    \"group_admin\": 1\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          }
        },
        {
          "name": "Get All Conversations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          }
        },
        {
          "name": "Get Specific Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get conversation successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.id).to.be.a('number');",
                  "    pm.expect(response.participants).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "{{conversation_id}}", ""]
            }
          }
        },
        {
          "name": "Filter Group Conversations",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Filter group conversations successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('array');",
                  "    response.forEach(function(conversation) {",
                  "        pm.expect(conversation.is_group).to.eql(true);",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/?is_group=true",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""],
              "query": [
                {
                  "key": "is_group",
                  "value": "true"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Messages",
      "item": [
        {
          "name": "Send Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('message_id', response.id);",
                  "    pm.test('Message sent successfully', function () {",
                  "        pm.expect(response.id).to.be.a('number');",
                  "        pm.expect(response.message_body).to.be.a('string');",
                  "        pm.expect(response.conversation).to.be.a('number');",
                  "        pm.expect(response.sender).to.be.a('number');",
                  "    });",
                  "} else {",
                  "    pm.test('Message sending failed', function () {",
                  "        pm.expect.fail('Request failed with status: ' + pm.response.code);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation\": {{conversation_id}},\n    \"message_body\": \"Hello! This is a test message from Postman.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""]
            }
          }
        },
        {
          "name": "Send Message with Attachment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Message with attachment sent successfully', function () {",
                  "        pm.expect(response.id).to.be.a('number');",
                  "        pm.expect(response.message_body).to.be.a('string');",
                  "        pm.expect(response.attachment_type).to.be.a('string');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation\": {{conversation_id}},\n    \"message_body\": \"Check out this image!\",\n    \"attachment\": \"https://example.com/image.jpg\",\n    \"attachment_type\": \"image\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""]
            }
          }
        },
        {
          "name": "Get All Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get messages successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.count).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""]
            }
          }
        },
        {
          "name": "Get Messages by Conversation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get conversation messages successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    response.results.forEach(function(message) {",
                  "        pm.expect(message.conversation).to.eql(parseInt(pm.collectionVariables.get('conversation_id')));",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/messages/?conversation={{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""],
              "query": [
                {
                  "key": "conversation",
                  "value": "{{conversation_id}}"
                }
              ]
            }
          }
        },
        {
          "name": "Get Unread Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get unread messages successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    response.results.forEach(function(message) {",
                  "        pm.expect(message.read).to.eql(false);",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/messages/?read=false",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""],
              "query": [
                {
                  "key": "read",
                  "value": "false"
                }
              ]
            }
          }
        },
        {
          "name": "Search Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Search messages successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/messages/?search=test",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""],
              "query": [
                {
                  "key": "search",
                  "value": "test"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Security Tests",
      "item": [
        {
          "name": "Access Without Token (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized access blocked', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          }
        },
        {
          "name": "Access Other User's Conversation (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Access to unauthorized conversation blocked', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/999/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", "999", ""]
            }
          }
        },
        {
          "name": "Send Message to Unauthorized Conversation (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Sending message to unauthorized conversation blocked', function () {",
                  "    pm.response.to.have.status(403);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.detail).to.include('permission');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation\": 999,\n    \"message_body\": \"This should fail!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""]
            }
          }
        },
        {
          "name": "Invalid Token (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid token rejected', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "invalid-token-12345",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          }
        }
      ]
    },
    {
      "name": "Edge Cases",
      "item": [
        {
          "name": "Create Conversation Without Participants",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Creating conversation without participants handled', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 201]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"is_group\": false\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/conversations/",
              "host": ["{{base_url}}"],
              "path": ["api", "conversations", ""]
            }
          }
        },
        {
          "name": "Send Empty Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Empty message handled appropriately', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 201]);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conversation\": {{conversation_id}},\n    \"message_body\": \"\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/messages/",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""]
            }
          }
        },
        {
          "name": "Pagination Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pagination working correctly', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.results).to.be.an('array');",
                  "    pm.expect(response.results.length).to.be.at.most(5);",
                  "    pm.expect(response.count).to.be.a('number');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{base_url}}/api/messages/?page_size=5&page=1",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""],
              "query": [
                {
                  "key": "page_size",
                  "value": "5"
                },
                {
                  "key": "page",
                  "value": "1"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}